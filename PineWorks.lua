local a,b=term.getSize()local c=window.create(term.current(),1,1,a,b)local d=term.redirect(c)local e={}for f,g in pairs(colors)do if type(g)=="number"then local h,i,j=term.getPaletteColor(g)e[g]={r=h,g=i,b=j}end end;local k=require("Pine3D")local l={}l.Pine3D=k;local m={}l.isDown=m;local n=k.newFrame()l.frame=n;l.scene=require("modules.scene")(l,n)l.modelGen=k.models;l.audio=require("modules.audio")l.cameraControllers=require("modules.cameraControllers")local function o(p)end;l.log=o;local q=false;local function r()q=true;if periphemu then periphemu.create("PW:log","monitor")local s=peripheral.wrap("PW:log")function o(p)if type(p)=="table"then p=textutils.serialise(p)elseif type(p)=="function"then p="function"elseif type(p)=="nil"then p="nil"else p=tostring(p)end;local t=term.redirect(s)print(p)term.redirect(t)end;l.log=o end;o("[Booting PW]\nUse PW.log() for logging")end;l.enableDebug=r;local u,v;l.setPaletteColor=function(g,h,i,j)if type(h)=="table"then local w=h;h=w[1]i=w[2]j=w[3]end;c.setPaletteColor(g,h,i,j)n.buffer.blitWin.setPaletteColor(g,h,i,j)local x=l.scene.selectedScene.hud.elements;for y,z in pairs(x)do z.win.setPaletteColor(g,h,i,j)end;if v then local A=v.elements;for y,z in pairs(A)do z.win.setPaletteColor(g,h,i,j)end end end;function l.model(B,C)local D=k.loadModel(B)if not C or not C.skipNormalize then D=D:center():alignBottom():normalizeScaleY()end;return D end;function l.run(C)if q then local E=require("modules.hudManager")v=E(n)u={fps=v:addText("FPS: xxx",1,1),polyCount=v:addText("Polygons: xxx",1,2),resolution=v:addText("Resolution: xxx",1,3),culled=v:addText("Culled: xxx",1,4)}end;local function F()while true do local G,H,I,J=os.pullEvent()local K=l.scene.selectedScene;if G=="key"then m[H]=true;if K.eventHandlers["key"]then K.eventHandlers["key"](H)end;if H==keys.f3 and debug then n:setWireFrame(not n.buffer.triangleEdges)end elseif G=="key_up"then m[H]=nil;if K.eventHandlers["key_up"]then K.eventHandlers["key_up"](H)end elseif G=="char"then if K.eventHandlers["char"]then K.eventHandlers["char"](H)end elseif G=="mouse_drag"then if K.eventHandlers["mouse_drag"]then K.eventHandlers["mouse_drag"](H,I,J)end elseif G=="mouse_click"then if K.eventHandlers["mouse_click"]then K.eventHandlers["mouse_click"](H,I,J)end elseif G=="mouse_up"then if K.eventHandlers["mouse_up"]then K.eventHandlers["mouse_up"](H,I,J)end elseif G=="mouse_scroll"then if K.eventHandlers["mouse_scroll"]then K.eventHandlers["mouse_scroll"](H,I,J)end elseif G=="term_resize"then local a,b=d.getSize()c.reposition(1,1,a,b)n:setSize(1,1,a,b)end;for L=#K.eventHandlersOnce,1,-1 do local M=K.eventHandlersOnce[L]if M.event==G then M.callback(H,I,J)table.remove(K.eventHandlersOnce,L)end end end end;local function N()local O=os.epoch("utc")local P=0;local Q=O;while true do local R=os.epoch("utc")local S=(R-O)/1000;O=R;S=math.min(S,0.1)if q then P=P+1;if R>Q+1000 then u.fps:setStr("FPS: "..P)P=1;Q=R end end;local K=l.scene.selectedScene;if K then if K.eventHandlers["update"]then K.eventHandlers["update"](S,l)end;if K.camera.controller then K.camera.controller:update(S,l)end;for L=#K.objects,1,-1 do local T=K.objects[L]if T.eventHandlers["update"]then T.eventHandlers["update"](S,l)end end;for L=#K.envObjects,1,-1 do local T=K.envObjects[L]if T.eventHandlers["update"]then T.eventHandlers["update"](S,l)end end;n:setCamera(K.camera)n:drawObjects(K.envObjectsPine)local U=n:drawObjects(K.objectsPine)if q then u.culled:setStr("Culled: "..U.." / "..#K.objectsPine)local V=0;for L=1,#K.envObjectsPine do local T=K.envObjectsPine[L]local W=T[7]V=V+#W end;for L=1,#K.objectsPine do local T=K.objectsPine[L]local W=T[7]V=V+#W end;u.polyCount:setStr("Polygons: "..V)local a,b=term.getSize()u.resolution:setStr("Resolution: "..a.." x "..b.." ("..a*2 .." x "..b*3 ..")")end;if K.eventHandlers.draw then K.eventHandlers.draw()end;n:drawBuffer()K.hud:render()if q then v:render()end;c.setVisible(true)c.setVisible(false)end;os.queueEvent("fake_event")os.pullEvent("fake_event")end end;local function X()parallel.waitForAny(F,N)end;local Y,Z=xpcall(X,debug.traceback)term.redirect(d)for g,w in pairs(e)do term.setPaletteColor(g,w.r,w.g,w.b)end;term.setBackgroundColor(colors.black)term.clear()term.setCursorPos(1,1)if not Y and Z:sub(1,10)~="Terminated"then term.setTextColor(colors.red)print(Z)else term.setTextColor(colors.yellow)print("Thank you for playing!")end end;return l